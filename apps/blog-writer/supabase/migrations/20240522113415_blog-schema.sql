-- Create the schema for the blog app

-- update config
update public.config set enable_team_accounts = false;
update public.config set enable_team_account_billing = false;

-- public.posts
create table if not exists public.posts (
   id uuid primary key default gen_random_uuid(),
   account_id uuid references public.accounts(id) on delete cascade not null,
   title varchar(1000) not null check (length(title) > 0),
   content text not null check (length(content) > 0),
   created_at timestamptz default now() not null
);

-- RLS
alter table public.posts enable row level security;

-- SELECT(public.posts)
create policy select_posts
    on public.posts
    for select
    to authenticated
    using (
       (select auth.uid()) = account_id
    );

-- UPDATE(public.posts)
create policy update_posts
    on public.posts
    for update
    to authenticated
    using (
        (select auth.uid()) = account_id
    )
    with check (
        (select auth.uid()) = account_id
    );

-- DELETE(public.posts)
create policy delete_posts
    on public.posts
    for delete
    to authenticated
    using (
        (select auth.uid()) = account_id
    );

-- public.credits_usage
create table if not exists public.credits_usage (
    id bigint generated by default as identity primary key,
    account_id uuid references public.accounts(id) on delete cascade not null,
    tokens_quota bigint default 20000 not null
);

-- RLS
alter table public.credits_usage enable row level security;

-- SELECT(public.credits_usage)
create policy select_credits_usage
    on public.credits_usage
    for select
    to authenticated
    using (
        (select auth.uid()) = account_id
    );

-- public.plans
create table if not exists public.plans (
    name text not null,
    variant_id text not null,
    tokens_quota bigint not null,
    primary key (variant_id)
);

-- RLS
alter table public.plans enable row level security;

-- SELECT(public.plans)
create policy select_plans
    on public.plans
    for select
    to authenticated
    using (true);

-- Function to get remaining tokens for an account
create or replace function public.has_tokens(target_account_id uuid, tokens int)
    returns bigint
    set search_path = ''
    as $$
begin
    return (select tokens_quota from public.credits_usage where account_id = target_account_id) >= tokens;
end; $$
    language plpgsql;

grant execute on function public.has_tokens to authenticated, service_role;

-- Function to consume tokens for an account
create or replace function public.consume_tokens(target_account_id uuid, tokens int)
    returns bigint as $$
declare
    remaining_tokens bigint;
begin
    update public.credits_usage set tokens_quota = tokens_quota - tokens
    where account_id = target_account_id returning tokens_quota
    into remaining_tokens;

    return remaining_tokens;
end; $$
    language plpgsql;

grant execute on function public.consume_tokens to service_role;

-- insert usage row for organizations on creation
create function public.handle_new_account_credits_usage()
returns trigger
language plpgsql
security definer set search_path = ''
as $$
begin
  insert into public.credits_usage (account_id)
  values (new.id);
  return new;
end;
$$;

-- trigger the function every time a user is created
create trigger on_account_created
  after insert on public.accounts
  for each row
  when (new.is_personal_account = true)
  execute procedure public.handle_new_account_credits_usage();